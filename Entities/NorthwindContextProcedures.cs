// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LeindaSaid_EntityFramework_Assinment3.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace LeindaSaid_EntityFramework_Assinment3.Entities
{
    public partial class NorthwindContext
    {
        private INorthwindContextProcedures _procedures;

        public virtual INorthwindContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new NorthwindContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public INorthwindContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class NorthwindContextProcedures : INorthwindContextProcedures
    {
        private readonly NorthwindContext _context;

        public NorthwindContextProcedures(NorthwindContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CustOrderHistResult>> CustOrderHistAsync(string CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 10,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CustOrderHistResult>("EXEC @returnValue = [dbo].[CustOrderHist] @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CustOrdersDetailResult>> CustOrdersDetailAsync(int? OrderID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CustOrdersDetailResult>("EXEC @returnValue = [dbo].[CustOrdersDetail] @OrderID = @OrderID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CustOrdersOrdersResult>> CustOrdersOrdersAsync(string CustomerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 10,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CustOrdersOrdersResult>("EXEC @returnValue = [dbo].[CustOrdersOrders] @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteCategoryByCategoryIDAsync(int? CategoryID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteCategoryByCategoryID] @CategoryID = @CategoryID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteEmployeeByIDAsync(int? EmployeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = EmployeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteEmployeeByID] @EmployeeID = @EmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteProductByIDAsync(int? ProductId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductId",
                    Value = ProductId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteProductByID] @ProductId = @ProductId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DiscontinuedProductsResult>> DiscontinuedProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DiscontinuedProductsResult>("EXEC @returnValue = [dbo].[DiscontinuedProducts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeSalesbyCountryResult>> EmployeeSalesbyCountryAsync(DateTime? Beginning_Date, DateTime? Ending_Date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Beginning_Date",
                    Value = Beginning_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Ending_Date",
                    Value = Ending_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeSalesbyCountryResult>("EXEC @returnValue = [dbo].[Employee Sales by Country] @Beginning_Date = @Beginning_Date, @Ending_Date = @Ending_Date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> NewProductDeleteCommandAsync(int? Original_ProductID, string Original_ProductName, int? IsNull_SupplierID, int? Original_SupplierID, int? IsNull_CategoryID, int? Original_CategoryID, int? IsNull_QuantityPerUnit, string Original_QuantityPerUnit, int? IsNull_UnitPrice, decimal? Original_UnitPrice, int? IsNull_UnitsInStock, short? Original_UnitsInStock, int? IsNull_UnitsOnOrder, short? Original_UnitsOnOrder, int? IsNull_ReorderLevel, short? Original_ReorderLevel, bool? Original_Discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = Original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = Original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = IsNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = Original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = IsNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = Original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = IsNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = Original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = IsNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = Original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = IsNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = Original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = IsNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = Original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = IsNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = Original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = Original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[NewProductDeleteCommand] @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NewProductInsertCommandResult>> NewProductInsertCommandAsync(string ProductName, int? SupplierID, int? CategoryID, string QuantityPerUnit, decimal? UnitPrice, short? UnitsInStock, short? UnitsOnOrder, short? ReorderLevel, bool? Discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NewProductInsertCommandResult>("EXEC @returnValue = [dbo].[NewProductInsertCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NewProductSelectCommandResult>> NewProductSelectCommandAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NewProductSelectCommandResult>("EXEC @returnValue = [dbo].[NewProductSelectCommand]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NewProductUpdateCommandResult>> NewProductUpdateCommandAsync(string ProductName, int? SupplierID, int? CategoryID, string QuantityPerUnit, decimal? UnitPrice, short? UnitsInStock, short? UnitsOnOrder, short? ReorderLevel, bool? Discontinued, int? Original_ProductID, string Original_ProductName, int? IsNull_SupplierID, int? Original_SupplierID, int? IsNull_CategoryID, int? Original_CategoryID, int? IsNull_QuantityPerUnit, string Original_QuantityPerUnit, int? IsNull_UnitPrice, decimal? Original_UnitPrice, int? IsNull_UnitsInStock, short? Original_UnitsInStock, int? IsNull_UnitsOnOrder, short? Original_UnitsOnOrder, int? IsNull_ReorderLevel, short? Original_ReorderLevel, bool? Original_Discontinued, int? ProductID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = Original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = Original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = IsNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = Original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = IsNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = Original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = IsNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = Original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = IsNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = Original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = IsNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = Original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = IsNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = Original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = IsNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = Original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = Original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ProductID",
                    Value = ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NewProductUpdateCommandResult>("EXEC @returnValue = [dbo].[NewProductUpdateCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued, @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued, @ProductID = @ProductID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PrdsDeleteCommandAsync(int? Original_ProductID, string Original_ProductName, int? IsNull_SupplierID, int? Original_SupplierID, int? IsNull_CategoryID, int? Original_CategoryID, int? IsNull_QuantityPerUnit, string Original_QuantityPerUnit, int? IsNull_UnitPrice, decimal? Original_UnitPrice, int? IsNull_UnitsInStock, short? Original_UnitsInStock, int? IsNull_UnitsOnOrder, short? Original_UnitsOnOrder, int? IsNull_ReorderLevel, short? Original_ReorderLevel, bool? Original_Discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = Original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = Original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = IsNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = Original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = IsNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = Original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = IsNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = Original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = IsNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = Original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = IsNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = Original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = IsNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = Original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = IsNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = Original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = Original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PrdsDeleteCommand] @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PrdsInsertCommandResult>> PrdsInsertCommandAsync(string ProductName, int? SupplierID, int? CategoryID, string QuantityPerUnit, decimal? UnitPrice, short? UnitsInStock, short? UnitsOnOrder, short? ReorderLevel, bool? Discontinued, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PrdsInsertCommandResult>("EXEC @returnValue = [dbo].[PrdsInsertCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PrdsSelectCommandResult>> PrdsSelectCommandAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PrdsSelectCommandResult>("EXEC @returnValue = [dbo].[PrdsSelectCommand]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PrdsUpdateCommandResult>> PrdsUpdateCommandAsync(string ProductName, int? SupplierID, int? CategoryID, string QuantityPerUnit, decimal? UnitPrice, short? UnitsInStock, short? UnitsOnOrder, short? ReorderLevel, bool? Discontinued, int? Original_ProductID, string Original_ProductName, int? IsNull_SupplierID, int? Original_SupplierID, int? IsNull_CategoryID, int? Original_CategoryID, int? IsNull_QuantityPerUnit, string Original_QuantityPerUnit, int? IsNull_UnitPrice, decimal? Original_UnitPrice, int? IsNull_UnitsInStock, short? Original_UnitsInStock, int? IsNull_UnitsOnOrder, short? Original_UnitsOnOrder, int? IsNull_ReorderLevel, short? Original_ReorderLevel, bool? Original_Discontinued, int? ProductID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryID",
                    Value = CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuantityPerUnit",
                    Size = 40,
                    Value = QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsInStock",
                    Value = UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitsOnOrder",
                    Value = UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ReorderLevel",
                    Value = ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Discontinued",
                    Value = Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductID",
                    Value = Original_ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ProductName",
                    Size = 80,
                    Value = Original_ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_SupplierID",
                    Value = IsNull_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_SupplierID",
                    Value = Original_SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_CategoryID",
                    Value = IsNull_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_CategoryID",
                    Value = Original_CategoryID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_QuantityPerUnit",
                    Value = IsNull_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_QuantityPerUnit",
                    Size = 40,
                    Value = Original_QuantityPerUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitPrice",
                    Value = IsNull_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = Original_UnitPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsInStock",
                    Value = IsNull_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsInStock",
                    Value = Original_UnitsInStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_UnitsOnOrder",
                    Value = IsNull_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_UnitsOnOrder",
                    Value = Original_UnitsOnOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IsNull_ReorderLevel",
                    Value = IsNull_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Original_ReorderLevel",
                    Value = Original_ReorderLevel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Original_Discontinued",
                    Value = Original_Discontinued ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ProductID",
                    Value = ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PrdsUpdateCommandResult>("EXEC @returnValue = [dbo].[PrdsUpdateCommand] @ProductName = @ProductName, @SupplierID = @SupplierID, @CategoryID = @CategoryID, @QuantityPerUnit = @QuantityPerUnit, @UnitPrice = @UnitPrice, @UnitsInStock = @UnitsInStock, @UnitsOnOrder = @UnitsOnOrder, @ReorderLevel = @ReorderLevel, @Discontinued = @Discontinued, @Original_ProductID = @Original_ProductID, @Original_ProductName = @Original_ProductName, @IsNull_SupplierID = @IsNull_SupplierID, @Original_SupplierID = @Original_SupplierID, @IsNull_CategoryID = @IsNull_CategoryID, @Original_CategoryID = @Original_CategoryID, @IsNull_QuantityPerUnit = @IsNull_QuantityPerUnit, @Original_QuantityPerUnit = @Original_QuantityPerUnit, @IsNull_UnitPrice = @IsNull_UnitPrice, @Original_UnitPrice = @Original_UnitPrice, @IsNull_UnitsInStock = @IsNull_UnitsInStock, @Original_UnitsInStock = @Original_UnitsInStock, @IsNull_UnitsOnOrder = @IsNull_UnitsOnOrder, @Original_UnitsOnOrder = @Original_UnitsOnOrder, @IsNull_ReorderLevel = @IsNull_ReorderLevel, @Original_ReorderLevel = @Original_ReorderLevel, @Original_Discontinued = @Original_Discontinued, @ProductID = @ProductID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalesbyYearResult>> SalesbyYearAsync(DateTime? Beginning_Date, DateTime? Ending_Date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Beginning_Date",
                    Value = Beginning_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Ending_Date",
                    Value = Ending_Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SalesbyYearResult>("EXEC @returnValue = [dbo].[Sales by Year] @Beginning_Date = @Beginning_Date, @Ending_Date = @Ending_Date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalesByCategoryResult>> SalesByCategoryAsync(string CategoryName, string OrdYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryName",
                    Size = 30,
                    Value = CategoryName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrdYear",
                    Size = 8,
                    Value = OrdYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SalesByCategoryResult>("EXEC @returnValue = [dbo].[SalesByCategory] @CategoryName = @CategoryName, @OrdYear = @OrdYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectAllCategoriesResult>> SelectAllCategoriesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectAllCategoriesResult>("EXEC @returnValue = [dbo].[SelectAllCategories]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLEmployeesResult>> SelectALLEmployeesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLEmployeesResult>("EXEC @returnValue = [dbo].[SelectALLEmployees]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectAllProductsResult>> SelectAllProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectAllProductsResult>("EXEC @returnValue = [dbo].[SelectAllProducts]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TenMostExpensiveProductsResult>> TenMostExpensiveProductsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TenMostExpensiveProductsResult>("EXEC @returnValue = [dbo].[Ten Most Expensive Products]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TestPrdResult>> TestPrdAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TestPrdResult>("EXEC @returnValue = [dbo].[TestPrd]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateProductNameByProductIDAsync(int? ProductID, string ProductName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductID",
                    Value = ProductID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductName",
                    Size = 80,
                    Value = ProductName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateProductNameByProductID] @ProductID = @ProductID, @ProductName = @ProductName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
